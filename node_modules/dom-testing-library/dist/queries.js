'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getByRole = exports.getAllByRole = exports.queryAllByRole = exports.queryByRole = exports.getAllByValue = exports.getByValue = exports.queryAllByValue = exports.queryByValue = exports.getAllByTitle = exports.getByTitle = exports.queryAllByTitle = exports.queryByTitle = exports.getAllByTestId = exports.getByTestId = exports.queryAllByTestId = exports.queryByTestId = exports.getAllByAltText = exports.getByAltText = exports.queryAllByAltText = exports.queryByAltText = exports.getAllByLabelText = exports.getByLabelText = exports.queryAllByLabelText = exports.queryByLabelText = exports.getAllByText = exports.getByText = exports.queryAllByText = exports.queryByText = exports.getAllByPlaceholderText = exports.getByPlaceholderText = exports.queryAllByPlaceholderText = exports.queryByPlaceholderText = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _matches = require('./matches');

var _getNodeText = require('./get-node-text');

var _queryHelpers = require('./query-helpers');

// Here are the queries for the library.
// The queries here should only be things that are accessible to both users who are using a screen reader
// and those who are not using a screen reader (with the exception of the data-testid attribute query).

function queryAllLabelsByText(container, text) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$exact = _ref.exact,
      exact = _ref$exact === undefined ? true : _ref$exact,
      _ref$trim = _ref.trim,
      trim = _ref$trim === undefined ? true : _ref$trim,
      _ref$collapseWhitespa = _ref.collapseWhitespace,
      collapseWhitespace = _ref$collapseWhitespa === undefined ? true : _ref$collapseWhitespa;

  var matcher = exact ? _matches.matches : _matches.fuzzyMatches;
  var matchOpts = { collapseWhitespace, trim };
  return Array.from(container.querySelectorAll('label')).filter(function (label) {
    return matcher(label.textContent, label, text, matchOpts);
  });
}

function queryAllByLabelText(container, text) {
  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref2$selector = _ref2.selector,
      selector = _ref2$selector === undefined ? '*' : _ref2$selector,
      _ref2$exact = _ref2.exact,
      exact = _ref2$exact === undefined ? true : _ref2$exact,
      _ref2$collapseWhitesp = _ref2.collapseWhitespace,
      collapseWhitespace = _ref2$collapseWhitesp === undefined ? true : _ref2$collapseWhitesp,
      _ref2$trim = _ref2.trim,
      trim = _ref2$trim === undefined ? true : _ref2$trim;

  var labels = queryAllLabelsByText(container, text, _extends({ exact }, { collapseWhitespace, trim }));
  var labelledElements = labels.map(function (label) {
    if (label.control) {
      return label.control;
    }
    /* istanbul ignore if */
    if (label.getAttribute('for')) {
      // we're using this notation because with the # selector we would have to escape special characters e.g. user.name
      // see https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector#Escaping_special_characters
      // <label for="someId">text</label><input id="someId" />

      // .control support has landed in jsdom (https://github.com/jsdom/jsdom/issues/2175)
      return container.querySelector(`[id="${label.getAttribute('for')}"]`);
    }
    if (label.getAttribute('id')) {
      // <label id="someId">text</label><input aria-labelledby="someId" />
      return container.querySelector(`[aria-labelledby~="${label.getAttribute('id')}"]`);
    }
    if (label.childNodes.length) {
      // <label>text: <input /></label>
      return label.querySelector(selector);
    }
    return null;
  }).filter(function (label) {
    return label !== null;
  }).concat((0, _queryHelpers.queryAllByAttribute)('aria-label', container, text, { exact }));

  return labelledElements;
}

function queryByLabelText() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return _queryHelpers.firstResultOrNull.apply(undefined, [queryAllByLabelText].concat(args));
}

function queryAllByText(container, text) {
  var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref3$selector = _ref3.selector,
      selector = _ref3$selector === undefined ? '*' : _ref3$selector,
      _ref3$exact = _ref3.exact,
      exact = _ref3$exact === undefined ? true : _ref3$exact,
      _ref3$collapseWhitesp = _ref3.collapseWhitespace,
      collapseWhitespace = _ref3$collapseWhitesp === undefined ? true : _ref3$collapseWhitesp,
      _ref3$trim = _ref3.trim,
      trim = _ref3$trim === undefined ? true : _ref3$trim;

  var matcher = exact ? _matches.matches : _matches.fuzzyMatches;
  var matchOpts = { collapseWhitespace, trim };
  return Array.from(container.querySelectorAll(selector)).filter(function (node) {
    return matcher((0, _getNodeText.getNodeText)(node), node, text, matchOpts);
  });
}

function queryByText() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return _queryHelpers.firstResultOrNull.apply(undefined, [queryAllByText].concat(args));
}

function queryAllByTitle(container, text) {
  var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref4$exact = _ref4.exact,
      exact = _ref4$exact === undefined ? true : _ref4$exact,
      _ref4$collapseWhitesp = _ref4.collapseWhitespace,
      collapseWhitespace = _ref4$collapseWhitesp === undefined ? true : _ref4$collapseWhitesp,
      _ref4$trim = _ref4.trim,
      trim = _ref4$trim === undefined ? true : _ref4$trim;

  var matcher = exact ? _matches.matches : _matches.fuzzyMatches;
  var matchOpts = { collapseWhitespace, trim };
  return Array.from(container.querySelectorAll('[title], svg > title')).filter(function (node) {
    return matcher(node.getAttribute('title'), node, text, matchOpts) || matcher((0, _getNodeText.getNodeText)(node), node, text, matchOpts);
  });
}

function queryByTitle() {
  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  return _queryHelpers.firstResultOrNull.apply(undefined, [queryAllByTitle].concat(args));
}

var queryByPlaceholderText = _queryHelpers.queryByAttribute.bind(null, 'placeholder');
var queryAllByPlaceholderText = _queryHelpers.queryAllByAttribute.bind(null, 'placeholder');
var queryByTestId = _queryHelpers.queryByAttribute.bind(null, 'data-testid');
var queryAllByTestId = _queryHelpers.queryAllByAttribute.bind(null, 'data-testid');
var queryByValue = _queryHelpers.queryByAttribute.bind(null, 'value');
var queryAllByValue = _queryHelpers.queryAllByAttribute.bind(null, 'value');
var queryByRole = _queryHelpers.queryByAttribute.bind(null, 'role');
var queryAllByRole = _queryHelpers.queryAllByAttribute.bind(null, 'role');

function queryAllByAltText(container, alt) {
  var _ref5 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref5$exact = _ref5.exact,
      exact = _ref5$exact === undefined ? true : _ref5$exact,
      _ref5$collapseWhitesp = _ref5.collapseWhitespace,
      collapseWhitespace = _ref5$collapseWhitesp === undefined ? true : _ref5$collapseWhitesp,
      _ref5$trim = _ref5.trim,
      trim = _ref5$trim === undefined ? true : _ref5$trim;

  var matcher = exact ? _matches.matches : _matches.fuzzyMatches;
  var matchOpts = { collapseWhitespace, trim };
  return Array.from(container.querySelectorAll('img,input,area')).filter(function (node) {
    return matcher(node.getAttribute('alt'), node, alt, matchOpts);
  });
}

function queryByAltText() {
  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }

  return _queryHelpers.firstResultOrNull.apply(undefined, [queryAllByAltText].concat(args));
}

// getters
// the reason we're not dynamically generating these functions that look so similar:
// 1. The error messages are specific to each one and depend on arguments
// 2. The stack trace will look better because it'll have a helpful method name.

function getAllByTestId(container, id) {
  for (var _len5 = arguments.length, rest = Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
    rest[_key5 - 2] = arguments[_key5];
  }

  var els = queryAllByTestId.apply(undefined, [container, id].concat(rest));
  if (!els.length) {
    throw (0, _queryHelpers.getElementError)(`Unable to find an element by: [data-testid="${id}"]`, container);
  }
  return els;
}

function getByTestId() {
  for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  return _queryHelpers.firstResultOrNull.apply(undefined, [getAllByTestId].concat(args));
}

function getAllByTitle(container, title) {
  for (var _len7 = arguments.length, rest = Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {
    rest[_key7 - 2] = arguments[_key7];
  }

  var els = queryAllByTitle.apply(undefined, [container, title].concat(rest));
  if (!els.length) {
    throw (0, _queryHelpers.getElementError)(`Unable to find an element with the title: ${title}.`, container);
  }
  return els;
}

function getByTitle() {
  for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
    args[_key8] = arguments[_key8];
  }

  return _queryHelpers.firstResultOrNull.apply(undefined, [getAllByTitle].concat(args));
}

function getAllByValue(container, value) {
  for (var _len9 = arguments.length, rest = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {
    rest[_key9 - 2] = arguments[_key9];
  }

  var els = queryAllByValue.apply(undefined, [container, value].concat(rest));
  if (!els.length) {
    throw (0, _queryHelpers.getElementError)(`Unable to find an element with the value: ${value}.`, container);
  }
  return els;
}

function getByValue() {
  for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
    args[_key10] = arguments[_key10];
  }

  return _queryHelpers.firstResultOrNull.apply(undefined, [getAllByValue].concat(args));
}

function getAllByPlaceholderText(container, text) {
  for (var _len11 = arguments.length, rest = Array(_len11 > 2 ? _len11 - 2 : 0), _key11 = 2; _key11 < _len11; _key11++) {
    rest[_key11 - 2] = arguments[_key11];
  }

  var els = queryAllByPlaceholderText.apply(undefined, [container, text].concat(rest));
  if (!els.length) {
    throw (0, _queryHelpers.getElementError)(`Unable to find an element with the placeholder text of: ${text}`, container);
  }
  return els;
}

function getByPlaceholderText() {
  for (var _len12 = arguments.length, args = Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
    args[_key12] = arguments[_key12];
  }

  return _queryHelpers.firstResultOrNull.apply(undefined, [getAllByPlaceholderText].concat(args));
}

function getAllByLabelText(container, text) {
  for (var _len13 = arguments.length, rest = Array(_len13 > 2 ? _len13 - 2 : 0), _key13 = 2; _key13 < _len13; _key13++) {
    rest[_key13 - 2] = arguments[_key13];
  }

  var els = queryAllByLabelText.apply(undefined, [container, text].concat(rest));
  if (!els.length) {
    var labels = queryAllLabelsByText.apply(undefined, [container, text].concat(rest));
    if (labels.length) {
      throw (0, _queryHelpers.getElementError)(`Found a label with the text of: ${text}, however no form control was found associated to that label. Make sure you're using the "for" attribute or "aria-labelledby" attribute correctly.`, container);
    } else {
      throw (0, _queryHelpers.getElementError)(`Unable to find a label with the text of: ${text}`, container);
    }
  }
  return els;
}

function getByLabelText() {
  for (var _len14 = arguments.length, args = Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
    args[_key14] = arguments[_key14];
  }

  return _queryHelpers.firstResultOrNull.apply(undefined, [getAllByLabelText].concat(args));
}

function getAllByText(container, text) {
  for (var _len15 = arguments.length, rest = Array(_len15 > 2 ? _len15 - 2 : 0), _key15 = 2; _key15 < _len15; _key15++) {
    rest[_key15 - 2] = arguments[_key15];
  }

  var els = queryAllByText.apply(undefined, [container, text].concat(rest));
  if (!els.length) {
    throw (0, _queryHelpers.getElementError)(`Unable to find an element with the text: ${text}. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.`, container);
  }
  return els;
}

function getByText() {
  for (var _len16 = arguments.length, args = Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
    args[_key16] = arguments[_key16];
  }

  return _queryHelpers.firstResultOrNull.apply(undefined, [getAllByText].concat(args));
}

function getAllByAltText(container, alt) {
  for (var _len17 = arguments.length, rest = Array(_len17 > 2 ? _len17 - 2 : 0), _key17 = 2; _key17 < _len17; _key17++) {
    rest[_key17 - 2] = arguments[_key17];
  }

  var els = queryAllByAltText.apply(undefined, [container, alt].concat(rest));
  if (!els.length) {
    throw (0, _queryHelpers.getElementError)(`Unable to find an element with the alt text: ${alt}`, container);
  }
  return els;
}

function getByAltText() {
  for (var _len18 = arguments.length, args = Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
    args[_key18] = arguments[_key18];
  }

  return _queryHelpers.firstResultOrNull.apply(undefined, [getAllByAltText].concat(args));
}

function getAllByRole(container, id) {
  for (var _len19 = arguments.length, rest = Array(_len19 > 2 ? _len19 - 2 : 0), _key19 = 2; _key19 < _len19; _key19++) {
    rest[_key19 - 2] = arguments[_key19];
  }

  var els = queryAllByRole.apply(undefined, [container, id].concat(rest));
  if (!els.length) {
    throw (0, _queryHelpers.getElementError)(`Unable to find an element by role=${id}`, container);
  }
  return els;
}

function getByRole() {
  for (var _len20 = arguments.length, args = Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
    args[_key20] = arguments[_key20];
  }

  return _queryHelpers.firstResultOrNull.apply(undefined, [getAllByRole].concat(args));
}

exports.queryByPlaceholderText = queryByPlaceholderText;
exports.queryAllByPlaceholderText = queryAllByPlaceholderText;
exports.getByPlaceholderText = getByPlaceholderText;
exports.getAllByPlaceholderText = getAllByPlaceholderText;
exports.queryByText = queryByText;
exports.queryAllByText = queryAllByText;
exports.getByText = getByText;
exports.getAllByText = getAllByText;
exports.queryByLabelText = queryByLabelText;
exports.queryAllByLabelText = queryAllByLabelText;
exports.getByLabelText = getByLabelText;
exports.getAllByLabelText = getAllByLabelText;
exports.queryByAltText = queryByAltText;
exports.queryAllByAltText = queryAllByAltText;
exports.getByAltText = getByAltText;
exports.getAllByAltText = getAllByAltText;
exports.queryByTestId = queryByTestId;
exports.queryAllByTestId = queryAllByTestId;
exports.getByTestId = getByTestId;
exports.getAllByTestId = getAllByTestId;
exports.queryByTitle = queryByTitle;
exports.queryAllByTitle = queryAllByTitle;
exports.getByTitle = getByTitle;
exports.getAllByTitle = getAllByTitle;
exports.queryByValue = queryByValue;
exports.queryAllByValue = queryAllByValue;
exports.getByValue = getByValue;
exports.getAllByValue = getAllByValue;
exports.queryByRole = queryByRole;
exports.queryAllByRole = queryAllByRole;
exports.getAllByRole = getAllByRole;
exports.getByRole = getByRole;

/* eslint complexity:["error", 14] */